name: Build and Deploy Docker Image to GitHub Container Registry

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the 'main' branch (or replace with your branch)

    
jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
    # Step 1: Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Log in to GitHub Container Registry using the GitHub token (stored as a secret)
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io  # GitHub Container Registry
        username: ${{ github.actor }}  # GitHub username
        password: ${{ secrets.GHCR_TOKEN }}  # Use the GitHub token stored as a secret

    # Step 3: Set up AWS credentials for GitHub Actions
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Step 4: Set up kubectl to interact with EKS
    - name: Set up kubectl for EKS
      run: |
        aws eks --region us-east-1 update-kubeconfig --name llama-cluster
      # Make sure the AWS IAM role used in GitHub Actions has sufficient permissions to interact with EKS


    # Step 5: Build the Docker image
    - name: Build Docker image
      run: |
        docker build -t ghcr.io/${{ github.repository }}/llama_rag:latest  -f ./docker/Dockerfile ./  # Tag the image with the GitHub Container Registry URL

    # Step 6: Push the Docker image to GitHub Container Registry
    - name: Push Docker image
      run: |
        docker push ghcr.io/${{ github.repository }}/llama_rag:latest  # Push the image to GitHub Container Registry

    # Step 7: Deploy to AWS EKS
    - name: Deploy to EKS
      run: |
        kubectl apply -f kubernetes/llama-deployment.yaml
        kubectl apply -f kubernetes/llama-service.yaml

    # Step 8: Verify that the deployment is successful
    - name: Check the status of pods
      run: |
        kubectl get pods

